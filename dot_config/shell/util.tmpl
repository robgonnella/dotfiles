# =================
# Functions
# =================

#######################################
# Start an HTTP server from a directory
# Arguments:
#  Port (optional)
#######################################

serve() {
  local port=${1:-8000}
  # Simplest server ever!
  (sleep 2 && open "http://localhost:${port}") &
  python -m http.server $port
}

#######################################
# Wrapper around tree command
#######################################

t() {
  local re='^[0-9]+$'
  local depth=1
  if [[ "$1" =~ "$re" ]]; then
    depth=$1
    shift
  fi
  tree -L $depth $@
}

#######################################
# List any open sockets on several popular
# ports or pass a specific port to check.
# Useful if a rogue server is running.
# http://www.akadia.com/services/lsof_intro.html
# http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers
#######################################

rogue() {
  # add or remove ports to check here!
  local ports=()
  local default_ports=(3000 4567 5432 6379 8000 8001 8080 8081 8082 8888 9515 27017)
  local message="> Checking for processes on ports: "
  local command="lsof"
  local command_args
  local output

  while [[ $# -gt 0 ]]; do
    case $1 in
      -p|--privileged)
        command="sudo lsof"
        shift
        ;;
      *)
        ports+="$1"
        shift
        ;;
    esac
  done

  if [ "${#ports[@]}" = "0" ]; then
    ports=("${default_ports[@]}")
  fi

  message="$message ${ports[@]}"

  for port in "${ports[@]}"; do
    if [ -z "${command_args}" ]; then
      command_args="-i TCP:${port}"
    else
      command_args="${command_args},${port}"
    fi
  done

  echo "$message"
  command="${command} ${command_args}"
  output="$(eval $command)"

  if [ -z "$output" ]; then
    echo "> Nothing running!"
  else
    echo "> Processes found:"
    printf "\n$output\n\n"
    echo "> Use the 'kill' command with the 'PID' of any process you want to quit."
    echo
  fi
}

dexec() {
  local cntnr=$1
  shift
  local cmd="${$@:-bash}"
  docker exec -ti ${cntnr} ${cmd}
}

dlist() {
  local ltype=c
  if [ -n "${1}" ]; then
    ltype="${1}"
    shift
  fi
  case ${ltype} in
    c|containers) docker ps -a "$@";;
    i|images) docker images "$@";;
    *)
      echo "unknown arg: ${ltype}, listing containers..."
      docker ps -a "$@";;
  esac
}

drm() {
  if [ -z "$1" ]; then
    docker rm -f $(dlist c -q)
  else
    docker rm -f "$@"
  fi
}

zshman() {
  less /usr/share/zsh/$ZSH_VERSION/help/$1
}

{{ if eq .chezmoi.os "darwin" -}}
disable_dark_mode_for_app() {
  local id="$(osascript -e "id of app \"${1}\"")"
  defaults write $id NSRequiresAquaSystemAppearance -bool Yes
}

enable_dark_mode_for_app() {
  local id="$(osascript -e "id of app \"${1}\"")"
  defaults delete $id NSRequiresAquaSystemAppearance
}
{{ end -}}
