#!/usr/bin/env zsh

# Ensure this script runs on Brewfile.tmpl changes by including a hash of its file contents:
# Brewfile.tmpl: {{ include ".chezmoitemplates/Brewfile.tmpl" | sha256sum }}

source $HOME/.zshrc

log() {
    echo
    echo -e "\033[1;36m===> $1\033[0m"
    echo
}

# atuin setup
log "Importing shell history to atuin"
atuin import auto

# install python
if ! command -v python >/dev/null 2>&1; then
    log "Installing python via mise"
    mise use --global python@$(mise latest python)
    log "Installing poetry via pipx"
    pipx install poetry --python=$(mise latest python)
fi

# configure poetry plugin for oh-my-zsh
if [ ! -d $HOME/.oh-my-zsh/plugins/poetry ]; then
    log "Configuring poetry plugin for oh-my-zsh"
    mkdir -p $HOME/.oh-my-zsh/plugins/poetry
    poetry completions zsh >$HOME/.oh-my-zsh/plugins/poetry/_poetry
fi

# install node
if ! command -v node >/dev/null 2>&1; then
    log "Installing node via mise"
    mise use --global node
fi

# install terraform
if ! command -v terraform >/dev/null 2>&1; then
    log "Installing terraform via mise"
    mise use --global terraform@1.7.4
fi

# install deno
if ! command -v deno >/dev/null 2>&1; then
    log "Installing deno via mise"
    mise use --global deno
fi

# java setup
if ! java --version >/dev/null 2>&1; then
    log "Install java openjdk17 via mise"
    mise use --global java@openjdk-17
fi

# install golang
if ! command -v go >/dev/null 2>&1; then
    log "Installing golang via mise"
    mise use --global go
fi

# install rust
if ! command -v rustc >/dev/null 2>&1; then
    log "Installing rust via mise"
    mise use --global rust
fi

log "Activating mise for rest of tooling setup"
eval "$(mise activate zsh)"

if ! cargo binstall --help >/dev/null 2>&1; then
    log "Installing cargo binstall"
    curl \
        -L \
        --proto '=https' \
        --tlsv1.2 \
        -sSf \
        https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
fi

{{- if eq .terminal_multiplexer "tmux" }}
# install tmux plugins
log "Installing tmux plugins"
{{ .chezmoi.homeDir }}/.tmux/plugins/tpm/bin/install_plugins
{{- end }}

{{- if eq .editor "vim" }}
# install vim plugins
log "Installing vim plugins"
vim +PluginInstall +qall
{{- end }}

# install helm plugins
if ! helm plugin list | grep diff >/dev/null 2>&1; then
    log "Installing helm-diff"
    helm plugin install https://github.com/databus23/helm-diff
fi

if ! helm plugin list | grep helm-git >/dev/null 2>&1; then
    log "Installing helm-git"
    helm plugin install https://github.com/aslafy-z/helm-git
fi

{{- if eq .editor "helix" }}
# install language servers and formatters
log "Installing language servers and formatters"
go install mvdan.cc/sh/v3/cmd/shfmt@latest
go install github.com/lasorda/protobuf-language-server@latest
go install github.com/go-delve/delve/cmd/dlv@latest
go install golang.org/x/tools/gopls@latest

# TODO update vscode-langservers-extracted once below issue is resolved
# https://github.com/helix-editor/helix/pull/11315
npm i -g bash-language-server \
    typescript typescript-language-server \
    vscode-langservers-extracted@4.8.0 \
    dockerfile-language-server-nodejs \
    @microsoft/compose-language-service \
    yaml-language-server \
    @prisma/language-server

pipx install "python-lsp-server[all]" black

cargo binstall -y --git 'https://github.com/feel-ix-343/markdown-oxide' markdown-oxide
{{- end }}

log 'Setup Complete'
